<devicedata>
  <manufacturer>OpenSprinkler</manufacturer>
  <model>OpenSprinklerPi</model>
  <search_type>c4:av_gen</search_type>
  <creator>Brandon Johnson</creator>
  <name>OpenSprinklerPi</name>
  <version>1.0.2</version>
  <small></small>
  <large></large>
  <top></top>
  <bottom></bottom>
  <front></front>
  <back></back>
  <left></left>
  <right></right>
  <control>lua_gen</control>
  <driver>DriverWorks</driver>
  <copyright>Copyright 2013 Brandon Johnson</copyright>
  <created>05/08/2013 00:00:02 AM</created>
  <modified>05/08/2013 00:00:02 AM</modified>
  <OnlineCategory>others</OnlineCategory>
  <combo>true</combo>
  <proxies qty="1">
    <proxy proxybindingid="5001" name="OpenSprinklerPi">opensprinklerpi</proxy>
  </proxies>
  <capabilities><surround_modes type="xml"></surround_modes></capabilities>
  <events></events>
  <connections>

    <connection>
      <id>9</id>
      <facing>6</facing>
      <connectionname>Expansion Port</connectionname>
      <type>1</type>
      <consumer>True</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>OPENSPRINKLERPI</classname>
          <autobind>True</autobind>
        </class>
      </classes>
    </connection>
    <connection>
      <id>1</id>
      <facing>6</facing>
      <connectionname>Zone1</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>2</id>
      <facing>6</facing>
      <connectionname>Zone2</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>3</id>
      <facing>6</facing>
      <connectionname>Zone3</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>4</id>
      <facing>6</facing>
      <connectionname>Zone4</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>5</id>
      <facing>6</facing>
      <connectionname>Zone5</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>6</id>
      <facing>6</facing>
      <connectionname>Zone6</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>7</id>
      <facing>6</facing>
      <connectionname>Zone7</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>8</id>
      <facing>6</facing>
      <connectionname>Zone8</connectionname>
      <type>1</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>RELAY</classname>
        </class>
      </classes>
    </connection>
  </connections>
  <config>
    <documentation>
    </documentation>

    <commands>
      <command>
        <name>ALL_OFF</name>
        <description>Turn off all zones and programs</description>
      </command>
      <command>
        <name>RUN_PROGRAM_A</name>
        <description>Run program A</description>
      </command>
      <command>
        <name>RUN_PROGRAM_B</name>
        <description>Run program B</description>
      </command>
      <command>
        <name>NEXT_ZONE</name>
        <description>Advance to next zone in program</description>
      </command>
    </commands>
    
    <properties>
      <property>
        <name>Debug Mode</name>
        <type>LIST</type>
        <readonly>False</readonly>
        <default>Off</default>
        <items>
          <item>Off</item>
          <item>Print</item>
          <item>Log</item>
          <item>Print and Log</item>
        </items>
      </property>
      <property>
        <name>HTTP Address</name>
        <type>STRING</type>
        <readonly>false</readonly>
        <default>10.0.0.57</default>
      </property>     
      <property>
        <name>HTTP Port</name>
        <type>RANGED_INTEGER</type>
        <readonly>False</readonly>
        <default>8080</default>
        <minimum>1024</minimum>
        <maximum>64000</maximum>
      </property>      
    </properties>
    <actions>
      <action>
        <name>Destroy All Timers</name>
        <command>Destroy Timers</command>
      </action>
    </actions>
    <script>
      <![CDATA[




gPollTimer = C4:AddTimer(60, "SECONDS", true) -- 30 second repeating timer...


g_debugprint = false
g_debuglog = false

httpAddress = Properties['HTTP Address']
httpPort = Properties['HTTP Port']


function OnTimerExpired(idTimer)
  if (idTimer == gPollTimer) 
  then
    dbg("polltimer test") 
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/zone")
    return  
  end
  
  if (idTimer == g_DebugTimer) 
  then
    dbg('Turning Debug Mode back to Off [default] (timer expired)')
    C4:UpdateProperty('Debug Mode', 'Off')
    g_debugprint = false
    g_debuglog = false
    g_DebugTimer = C4:KillTimer(g_DebugTimer)
    return
  end
end


function ReceivedAsync(ticketId, strData, responseCode)
  dbg('ReceivedAsync: ' .. ticketId .. " " .. strData .. " " .. responseCode)
  t = Decode(strData)

  if (table.contains(t, 'zone') == true) then
    print ("process zone")
    if (t.zone.isRunning == true) then
      C4:SendToProxy(t.zone.number, "CLOSED", {}, "NOTIFY")
    else
      C4:SendToProxy(t.zone.number, "OPENED", {}, "NOTIFY")
  end  

  elseif (table.contains(t, 'zones') == true) then
    print ("process zones")
    for k,v in pairs(t.zones) do
      if (v.isRunning == true) then
        C4:SendToProxy(v.number, "CLOSED", {}, "NOTIFY")
      else
        C4:SendToProxy(v.number, "OPENED", {}, "NOTIFY")
      end
    end

  elseif (table.contains(t, 'program') == true) then
    print ("process program")
    for k,v in pairs(t.program.zones) do
      if (v.isRunning == true) then
        C4:SendToProxy(v.number, "CLOSED", {}, "NOTIFY")
      else
        C4:SendToProxy(v.number, "OPENED", {}, "NOTIFY")
      end
    end

  elseif (table.contains(t, 'programs') == true) then
    print ("process programs")

  elseif (table.contains(t, 'error') == true) then
    print ("process error")
  
  end
end


function table.contains(table, element)
  for _, value in pairs(table) do
    if _ == element then
      return true
    end
  end
  return false
end

function ReceivedFromProxy(idBinding, strCommand, tParams)
  dbg('ReceivedFromProxy: ' .. idBinding .. " " .. strCommand)

  if (strCommand == "ON") then
    --C4:SendToProxy(idBinding, "OPENED", {}, "NOTIFY")
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/zone/" .. idBinding .. "/start")
    
  elseif (strCommand == "OFF") then
    --C4:SendToProxy(idBinding, "CLOSED", {}, "NOTIFY")
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/zone/" .. idBinding .. "/stop")
    
  elseif (strCommand == "TOGGLE") then 
    --C4:SendToProxy(idBinding, "CLOSED", {}, "NOTIFY")
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/zone/" .. idBinding .. "/toggle")

  end
end


function ExecuteCommand(Command, Parameters)
  dbg('XBMC: ExecuteCommand: ' .. Command)

  if (Command == "RUN_PROGRAM_A") then
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/program/A/start")
  elseif (Command == "RUN_PROGRAM_B") then
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/program/B/start")
  elseif (Command == "NEXT_ZONE") then
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/program/next")
  elseif (Command == "ALL_OFF") then
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/program/stop")
    C4:urlGet("http://" .. httpAddress .. ":" .. httpPort .. "/sprinkler/zone/stop")
  end
end


function OnDriverDestroyed()
  if (g_DebugTimer) then g_DebugTimer = C4:KillTimer(g_DebugTimer) end
  if (gPollTimer ~= nil) then gPollTimer = C4:KillTimer(gPollTimer) end
end


function dbg(strDebugText)
  if (g_debugprint) then print(strDebugText) end
  if (g_debuglog) then C4:ErrorLog(strDebugText) end
end


function startDebugTimer()
  if (g_DebugTimer) then
    g_DebugTimer = C4:KillTimer(g_DebugTimer)
  end
  g_DebugTimer = C4:AddTimer(15, 'MINUTES')
end


function OnPropertyChanged(strProperty)
  if (strProperty == 'Debug Mode') then
    if (Properties[strProperty] == 'Off') then
      g_debugprint = false
      g_debuglog = false
      g_DebugTimer = C4:KillTimer(g_DebugTimer)
      g_DebugTimer = 0
    end
    if (Properties[strProperty] == 'Print') then
      g_debugprint = true
      g_debuglog = false
      startDebugTimer()
    end
    if (Properties[strProperty] == 'Log') then
      g_debugprint = false
      g_debuglog = true
      startDebugTimer()
    end
    if (Properties[strProperty] == 'Print and Log') then
      g_debugprint = true
      g_debuglog = true
      startDebugTimer()
    end
        dbg("Debug mode changed")
  
  elseif (strProperty == "HTTP Address") then
    httpAddress = Properties['HTTP Address']
  
  elseif (strProperty == "HTTP Port") then
    httpPort = Properties['HTTP Port']

  end
end













































--[[

 JSON Encoder and Parser for Lua 5.1

 Copyright ? 2007 Shaun Brown (http://www.chipmunkav.com).
 All Rights Reserved.

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
 If you find this software useful please give www.chipmunkav.com a mention.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Usage:

 -- Lua script:
 local t = {
  ["name1"] = "value1",
  ["name2"] = {1, false, true, 23.54, "a \021 string"},
  name3 = Json.Null()
 }

 local json = Json.Encode (t)
 print (json)
 --> {"name1":"value1","name3":null,"name2":[1,false,true,23.54,"a \u0015 string"]}

 local t = Json.Decode(json)
 print(t.name2[4])
 --> 23.54

 Notes:
 1) Encodable Lua types: string, number, boolean, table, nil
 2) Use Json.Null() to insert a null value into a Json object
 3) All control chars are encoded to \uXXXX format eg "\021" encodes to "\u0015"
 4) All Json \uXXXX chars are decoded to chars (0-255 byte range only)
 5) Json single line // and /* */ block comments are discarded during decoding
 6) Numerically indexed Lua arrays are encoded to Json Lists eg [1,2,3]
 7) Lua dictionary tables are converted to Json objects eg {"one":1,"two":2}
 8) Json nulls are decoded to Lua nil and treated by Lua in the normal way

--]]
local string = string
local math = math
local table = table
local error = error
local tonumber = tonumber
local tostring = tostring
local type = type
local setmetatable = setmetatable
local pairs = pairs
local ipairs = ipairs
local assert = assert
local Chipmunk = Chipmunk

--module("Json")

local StringBuilder = {
  buffer = {}
}

function StringBuilder:New()
  local o = {}
  setmetatable(o, self)
  self.__index = self
  o.buffer = {}
  return o
end

function StringBuilder:Append(s)
  self.buffer[#self.buffer+1] = s
end

function StringBuilder:ToString()
  return table.concat(self.buffer)
end

local JsonWriter = {
  backslashes = {
    ['\b'] = "\\b",
    ['\t'] = "\\t",
    ['\n'] = "\\n",
    ['\f'] = "\\f",
    ['\r'] = "\\r",
    ['"']  = "\\\"",
    ['\\'] = "\\\\",
    ['/']  = "\\/"
  }
}

function JsonWriter:New()
  local o = {}
  o.writer = StringBuilder:New()
  setmetatable(o, self)
  self.__index = self
  return o
end

function JsonWriter:Append(s)
  self.writer:Append(s)
end

function JsonWriter:ToString()
  return self.writer:ToString()
end

function JsonWriter:Write(o)
  local t = type(o)
  if t == "nil" then
    self:WriteNil()
  elseif t == "boolean" then
    self:WriteString(o)
  elseif t == "number" then
    self:WriteString(o)
  elseif t == "string" then
    self:ParseString(o)
  elseif t == "table" then
    self:WriteTable(o)
  elseif t == "function" then
    self:WriteFunction(o)
  elseif t == "thread" then
    self:WriteError(o)
  elseif t == "userdata" then
    self:WriteError(o)
  end
end

function JsonWriter:WriteNil()
  self:Append("null")
end

function JsonWriter:WriteString(o)
  self:Append(tostring(o))
end

function JsonWriter:ParseString(s)
  self:Append('"')
  self:Append(string.gsub(s, "[%z%c\\\"/]", function(n)
    local c = self.backslashes[n]
    if c then return c end
    return string.format("\\u%.4X", string.byte(n))
  end))
  self:Append('"')
end

function JsonWriter:IsArray(t)
  local count = 0
  local isindex = function(k)
    if type(k) == "number" and k > 0 then
      if math.floor(k) == k then
        return true
      end
    end
    return false
  end
  for k,v in pairs(t) do
    if not isindex(k) then
      return false, '{', '}'
    else
      count = math.max(count, k)
    end
  end
  return true, '[', ']', count
end

function JsonWriter:WriteTable(t)
  local ba, st, et, n = self:IsArray(t)
  self:Append(st)
  if ba then
    for i = 1, n do
      self:Write(t[i])
      if i < n then
        self:Append(',')
      end
    end
  else
    local first = true;
    for k, v in pairs(t) do
      if not first then
        self:Append(',')
      end
      first = false;
      self:ParseString(k)
      self:Append(':')
      self:Write(v)
    end
  end
  self:Append(et)
end

function JsonWriter:WriteError(o)
  error(string.format(
    "Encoding of %s unsupported",
    tostring(o)))
end

function JsonWriter:WriteFunction(o)
  if o == Null then
    self:WriteNil()
  else
    self:WriteError(o)
  end
end

local StringReader = {
  s = "",
  i = 0
}

function StringReader:New(s)
  local o = {}
  setmetatable(o, self)
  self.__index = self
  o.s = s or o.s
  return o
end

function StringReader:Peek()
  local i = self.i + 1
  if i <= #self.s then
    return string.sub(self.s, i, i)
  end
  return nil
end

function StringReader:Next()
  self.i = self.i+1
  if self.i <= #self.s then
    return string.sub(self.s, self.i, self.i)
  end
  return nil
end

function StringReader:All()
  return self.s
end

local JsonReader = {
  escapes = {
    ['t'] = '\t',
    ['n'] = '\n',
    ['f'] = '\f',
    ['r'] = '\r',
    ['b'] = '\b',
  }
}

function JsonReader:New(s)
  local o = {}
  o.reader = StringReader:New(s)
  setmetatable(o, self)
  self.__index = self
  return o;
end

function JsonReader:Read()
  self:SkipWhiteSpace()
  local peek = self:Peek()
  if peek == nil then
    error(string.format(
      "Nil string: '%s'",
      self:All()))
  elseif peek == '{' then
    return self:ReadObject()
  elseif peek == '[' then
    return self:ReadArray()
  elseif peek == '"' then
    return self:ReadString()
  elseif string.find(peek, "[%+%-%d]") then
    return self:ReadNumber()
  elseif peek == 't' then
    return self:ReadTrue()
  elseif peek == 'f' then
    return self:ReadFalse()
  elseif peek == 'n' then
    return self:ReadNull()
  elseif peek == '/' then
    self:ReadComment()
    return self:Read()
  else
    error(string.format(
      "Invalid input: '%s'",
      self:All()))
  end
end

function JsonReader:ReadTrue()
  self:TestReservedWord{'t','r','u','e'}
  return true
end

function JsonReader:ReadFalse()
  self:TestReservedWord{'f','a','l','s','e'}
  return false
end

function JsonReader:ReadNull()
  self:TestReservedWord{'n','u','l','l'}
  return nil
end

function JsonReader:TestReservedWord(t)
  for i, v in ipairs(t) do
    if self:Next() ~= v then
       error(string.format(
        "Error reading '%s': %s",
        table.concat(t),
        self:All()))
    end
  end
end

function JsonReader:ReadNumber()
        local result = self:Next()
        local peek = self:Peek()
        while peek ~= nil and string.find(
    peek,
    "[%+%-%d%.eE]") do
            result = result .. self:Next()
            peek = self:Peek()
  end
  result = tonumber(result)
  if result == nil then
          error(string.format(
      "Invalid number: '%s'",
      result))
  else
    return result
  end
end

function JsonReader:ReadString()
  local result = ""
  assert(self:Next() == '"')
        while self:Peek() ~= '"' do
    local ch = self:Next()
    if ch == '\\' then
      ch = self:Next()
      if self.escapes[ch] then
        ch = self.escapes[ch]
      end
    end
                result = result .. ch
  end
        assert(self:Next() == '"')
  local fromunicode = function(m)
    return string.char(tonumber(m, 16))
  end
  return string.gsub(
    result,
    "u%x%x(%x%x)",
    fromunicode)
end

function JsonReader:ReadComment()
        assert(self:Next() == '/')
        local second = self:Next()
        if second == '/' then
            self:ReadSingleLineComment()
        elseif second == '*' then
            self:ReadBlockComment()
        else
            error(string.format(
    "Invalid comment: %s",
    self:All()))
  end
end

function JsonReader:ReadBlockComment()
  local done = false
  while not done do
    local ch = self:Next()
    if ch == '*' and self:Peek() == '/' then
      done = true
                end
    if not done and
      ch == '/' and
      self:Peek() == "*" then
                    error(string.format(
      "Invalid comment: %s, '/*' illegal.",
      self:All()))
    end
  end
  self:Next()
end

function JsonReader:ReadSingleLineComment()
  local ch = self:Next()
  while ch ~= '\r' and ch ~= '\n' do
    ch = self:Next()
  end
end

function JsonReader:ReadArray()
  local result = {}
  assert(self:Next() == '[')
  local done = false
  if self:Peek() == ']' then
    done = true;
  end
  while not done do
    local item = self:Read()
    result[#result+1] = item
    self:SkipWhiteSpace()
    if self:Peek() == ']' then
      done = true
    end
    if not done then
      local ch = self:Next()
      if ch ~= ',' then
        error(string.format(
          "Invalid array: '%s' due to: '%s'",
          self:All(), ch))
      end
    end
  end
  assert(']' == self:Next())
  return result
end

function JsonReader:ReadObject()
  local result = {}
  assert(self:Next() == '{')
  local done = false
  if self:Peek() == '}' then
    done = true
  end
  while not done do
    local key = self:Read()
    if type(key) ~= "string" then
      error(string.format(
        "Invalid non-string object key: %s",
        key))
    end
    self:SkipWhiteSpace()
    local ch = self:Next()
    if ch ~= ':' then
      error(string.format(
        "Invalid object: '%s' due to: '%s'",
        self:All(),
        ch))
    end
    self:SkipWhiteSpace()
    local val = self:Read()
    result[key] = val
    self:SkipWhiteSpace()
    if self:Peek() == '}' then
      done = true
    end
    if not done then
      ch = self:Next()
                  if ch ~= ',' then
        error(string.format(
          "Invalid array: '%s' near: '%s'",
          self:All(),
          ch))
      end
    end
  end
  assert(self:Next() == "}")
  return result
end

function JsonReader:SkipWhiteSpace()
  local p = self:Peek()
  while p ~= nil and string.find(p, "[%s/]") do
    if p == '/' then
      self:ReadComment()
    else
      self:Next()
    end
    p = self:Peek()
  end
end

function JsonReader:Peek()
  return self.reader:Peek()
end

function JsonReader:Next()
  return self.reader:Next()
end

function JsonReader:All()
  return self.reader:All()
end

function Encode(o)
  local writer = JsonWriter:New()
  writer:Write(o)
  return writer:ToString()
end

function Decode(s)
  local reader = JsonReader:New(s)
  return reader:Read()
end

function Null()
  return Null
end




]]>
    </script>
  </config>
  <driverdocumentation />
  <controlmethod>ip</controlmethod>
</devicedata>