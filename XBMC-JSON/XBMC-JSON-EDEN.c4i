<devicedata>
	<version>1</version>
	<manufacturer>XBMC.ORG</manufacturer>
	<model>XBMC HTPC</model>
	<search_type>c4:av_gen</search_type>
	<creator>Brandon Johnson</creator>
	<name>XBMC</name>
	<small>devices_sm/receiver.gif</small>
	<large>devices_lg/receiver.gif</large>
	<top></top>
	<bottom></bottom>
	<front></front>
	<back></back>
	<left></left>
	<right></right>
	<control>lua_gen</control>
	<driver>DriverWorks</driver>
	<copyright>Copyright 2012 Brandon Johnson</copyright>
	<created>1/28/2012 12:00:01 AM</created>
	<modified>1/28/2012 12:00:01 AM</modified>
	
	<proxies qty="1">
		<proxy proxybindingid="5001">media_player</proxy>
	</proxies>
	
	<capabilities>
		<surround_modes />
	</capabilities>  

	<connections>
		<connection>
			<id>5001</id>
			<type>2</type>
			<connectionname>MEDIA_PLAYER</connectionname>
			<audiosource>False</audiosource>
			<videosource>True</videosource>
			<consumer>False</consumer>
			<linelevel>False</linelevel>
			<classes>
				<class>
					<classname>MEDIA_PLAYER</classname>
				</class>
			</classes>
		</connection>

		<connection proxybindingid="5001" verified="False">
			<id>4000</id>
			<facing>6</facing>
			<connectionname>OUTPUT</connectionname>
			<type>6</type>
			<consumer>False</consumer>
			<audiosource>True</audiosource>
			<videosource>False</videosource>
			<linelevel>True</linelevel>
			<classes>
				<class>
					<classname>STEREO</classname>
				</class>
				<class>
					<classname>DIGITAL_OPTICAL</classname>
				</class>
				<class>
					<classname>DIGITAL_COAX</classname>
				</class>
			</classes>
		</connection>

		<connection proxybindingid="5001" verified="False">
			<id>2000</id>
			<facing>6</facing>
			<connectionname>OUTPUT</connectionname>
			<type>5</type>
			<consumer>False</consumer>
			<audiosource>False</audiosource>
			<videosource>True</videosource>
			<linelevel>True</linelevel>
			<classes>
				<class>
					<classname>COMPONENT</classname>
				</class>
				<class>
					<classname>COMPOSITE</classname>
				</class>
				<class>
					<classname>SVIDEO</classname>
				</class>
				<class>
					<classname>DVI</classname>
				</class>
				<class>
					<classname>HDMI</classname>
				</class>
				<class>
					<classname>VGA</classname>
				</class>
			</classes>
		</connection>

		<connection proxybindingid="5001" verified="False">
			<id>7000</id>
			<facing>6</facing>
			<connectionname>Room Selection - OUTPUT</connectionname>
			<type>7</type>
			<consumer>False</consumer>
			<audiosource>True</audiosource>
			<videosource>True</videosource>
			<linelevel>True</linelevel>
			<classes>
				<class>
					<classname>AUDIO_SELECTION</classname>
				</class>
				<class>
					<classname>AUDIO_VOLUME</classname>
				</class>
				<class>
					<classname>VIDEO_SELECTION</classname>
				</class>
			</classes>
		</connection>

		<connection>
			<id>6001</id>
			<facing>6</facing>
			<connectionname>XBMC IP Connection</connectionname>
			<type>4</type>
			<consumer>True</consumer>
			<audiosource>False</audiosource>
			<videosource>False</videosource>
			<linelevel>True</linelevel>
			<classes>
				<class>
					<classname>TCP</classname>
					<ports>
						<port>
							<number>9090</number>
							<auto_connect>True</auto_connect>
							<monitor_connection>True</monitor_connection>
							<keep_connection>True</keep_connection>
						</port>
						<port>
							<number>8080</number>
							<auto_connect>False</auto_connect>
							<monitor_connection>False</monitor_connection>
							<keep_connection>False</keep_connection>
						</port>
					</ports>
				</class>
			</classes>
		</connection>

		<connection>
			<id>2001</id>
			<facing>6</facing>
			<force>True</force>
			<connectionname>Digital Media Storage</connectionname>
			<type>5</type>
			<consumer>True</consumer>
			<audiosource>False</audiosource>
			<videosource>False</videosource>
			<linelevel>False</linelevel>
			<hidden>True</hidden>
			<classes>
				<class>
					<autobind>True</autobind>
					<classname>DIGITAL_MEDIA_STORAGE</classname>
				</class>
			</classes>
		</connection>
	</connections>


	<config>
		<documentation>
			-Make sure the "Allow programs on other systems to control XBMC" setting in the network settings of XBMC is enabled
			-Make sure the "Allow control of XBMC via HTTP" setting is also enabled on port 8080
		</documentation>

		<commands></commands>

		<properties>
			<property>
				<name>JSON-RPC Port</name>
				<type>RANGED_INTEGER</type>
				<minimum>1024</minimum>
				<maximum>65535</maximum>
				<default>9090</default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>HTTP Port</name>
				<type>RANGED_INTEGER</type>
				<minimum>1024</minimum>
				<maximum>65535</maximum>
				<default>8080</default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>HTTP Username</name>
				<type>STRING</type>
				<default>xbmc</default>
				<readonly>false</readonly>
			</property>
			
			<property>
				<name>HTTP Password</name>
				<type>STRING</type>
				<default></default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>Connected To Network</name>
				<type>STRING</type>
				<default>false</default>
				<readonly>true</readonly>
			</property>

			<property>
				<name>Debug Mode</name>
				<type>LIST</type>
				<items>
					<item>Off</item>
					<item>Print</item>
					<item>Log</item>
					<item>Print and Log</item>
				</items>
				<default>Off</default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>Power On Delay-Seconds</name>
				<type>RANGED_INTEGER</type>
				<minimum>0</minimum>
				<maximum>25</maximum>
				<default>5</default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>Command Delay-Milliseconds</name>
				<type>RANGED_INTEGER</type>
				<minimum>50</minimum>
				<maximum>2500</maximum>
				<default>250</default>
				<readonly>false</readonly>
			</property>

			<property>
				<name>Volume Ramp Delay-Milliseconds</name>
				<type>RANGED_INTEGER</type>
				<minimum>50</minimum>
				<maximum>500</maximum>
				<default>100</default>
				<readonly>false</readonly>
			</property>
		</properties>

		<actions>
			<action>
				<name>Destroy All Timers</name>
				<command>Destroy Timers</command>
			</action>
		</actions>
		
		
		<script>
<![CDATA[
gPollTimer = 0
idConnectToNetworkTimer = 0
tPendingCommands = {}
tEmitCommands = {}
idBusyTimer = 0
g_debugprint = false
g_debuglog = false
g_PowerState = {}
g_URLPacket = ""

jsonPort = Properties['JSON-RPC Port']
httpPort = Properties['HTTP Port']
httpUser = Properties['HTTP Username']
httpPass = Properties['HTTP Password']


mNetConnected = tostring(Properties['Connected To Network'])
intraCommandDelayValue = Properties['Command Delay-Milliseconds']
intraVolRampDelayValue = Properties['Volume Ramp Delay-Milliseconds']

CurrentInputMode = "Navigation"
CurrentPlayerID = 0


XBMC_CMDS =
{
	['Application.Getproperties'] = '',
	['Application.Quit'] = '',
	['Application.SetMute'] = '',
	['Application.SetVolume'] = '',
	['AudioLibrary.Clean'] = '',
	['AudioLibrary.Export'] = '',
	['AudioLibrary.GetAlbumDetails'] = '',
	['AudioLibrary.GetAlbums'] = '',
	['AudioLibrary.GetArtistDetails'] = '',
	['AudioLibrary.GetArtists'] = '',
	['AudioLibrary.GetGenres'] = '',
	['AudioLibrary.GetRecentlyAddedAlbums'] = '',
	['AudioLibrary.GetRecentlyAddedSongs'] = '',
	['AudioLibrary.GetSongDetails'] = '',
	['AudioLibrary.GetSongs'] = '',
	['AudioLibrary.Scan'] = '',
	['Files.Download'] = '',
	['Files.GetDirectory'] = '',
	['Files.GetSources'] = '',

	
	['Input.Back'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Back",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,

	
	['Input.Down'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Down",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Input.Home'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Home",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Input.Left'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Left",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Input.Right'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Right",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Input.Select'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Select",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Input.Up'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Input.Up",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['JSONRPC.Introspect'] = '',
	['JSONRPC.NotifyAll'] = '',
	['JSONRPC.Permission'] = '',


	['JSONRPC.Ping'] = function (id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "JSONRPC.Ping",
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end, 


	['JSONRPC.Version'] = '',
	['Player.GetActivePlayers'] = '',
	['Player.GetItem'] = '',
	['Player.GetProperties'] = '',
	

	['Player.GoNext'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.GoNext",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,
	

	['Player.GoPrevious'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.GoPrevious",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.GoTo'] = '',


	['Player.MoveDown'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.MoveDown",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,
	

	['Player.MoveLeft'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.MoveLeft",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.MoveRight'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.MoveRight",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.MoveUp'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.MoveUp",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.Open'] = '',


	['Player.PlayPause'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.PlayPause",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end, 


	['Player.Repeat'] = function (state, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Repeat",
			["params"] = 
			{
				["state"] = state or "off",
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,
	
						
	['Player.Rotate'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Rotate",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.Seek'] = function (value, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Seek",
			["params"] = 
			{
				["value"] = value,
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.SetAudioStream'] = function (stream, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.SetAudioStream",
			["params"] = 
			{
				["stream"] = stream or "next",
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.SetSpeed'] = function (speed, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.SetSpeed",
			["params"] = 
			{
				["speed"] = speed or 0,
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.SetSubtitle'] = function (subtitle, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.SetSubtitle",
			["params"] = 
			{
				["subtitle"] = subtitle or "next",
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.Shuffle'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Shuffle",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,
	

	['Player.Stop'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Stop",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end, 


	['Player.UnShuffle'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.UnShuffle",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.Zoom'] = function (value, playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.Zoom",
			["params"] = 
			{
				["value"] = value or 1,
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.ZoomIn'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.ZoomIn",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Player.ZoomOut'] = function (playerId, id)
		local t =
		{
			["jsonrpc"] = "2.0",
			["method"] = "Player.ZoomOut",
			["params"] = 
			{
				["playerid"] = playerId or CurrentPlayerID,
			}
		}
		if type(id) == "number" then t["id"] = id end
		emit(t, "json")
	end,


	['Playlist.Add'] = '',
	['Playlist.Clear'] = '',
	['Playlist.GetItems'] = '',
	['Playlist.GetPlaylists'] = '',
	['Playlist.GetProperties'] = '',
	['Playlist.Insert'] = '',
	['Playlist.Remove'] = '',
	['Playlist.Swap'] = '',
	['System.GetProperties'] = '',
	['System.Hibernate'] = '',
	['System.Reboot'] = '',
	['System.Shutdown'] = '',
	['System.Suspend'] = '',
	['VideoLibrary.Clean'] = '',
	['VideoLibrary.Export'] = '',
	['VideoLibrary.GetEpisodeDetails'] = '',
	['VideoLibrary.GetEpisodes'] = '',
	['VideoLibrary.GetGenres'] = '',
	['VideoLibrary.GetMovieDetails'] = '',
	['VideoLibrary.GetMovieSetDetails'] = '',
	['VideoLibrary.GetMovieSets'] = '',
	['VideoLibrary.GetMovies'] = '',
	['VideoLibrary.GetMusicVideoDetails'] = '',
	['VideoLibrary.GetMusicVideos'] = '',
	['VideoLibrary.GetRecentlyAddedEpisodes'] = '',
	['VideoLibrary.GetRecentlyAddedMovies'] = '',
	['VideoLibrary.GetRecentlyAddedMusicVideos'] = '',
	['VideoLibrary.GetSeasons'] = '',
	['VideoLibrary.GetTVShowDetails'] = '',
	['VideoLibrary.GetTVShows'] = '',
	['VideoLibrary.Scan'] = '',
	['XBMC.GetInfoBooleans'] = '',
	['XBMC.GetInfoLabels'] = '',


	--nonstandard commands that are actually HTTP requests
	['Input.PageDown'] 		= function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(PageDown)", 	"http") end,
	['Input.PageUp'] 		= function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(PageUp)", 		"http") end,
	['Input.ContextMenu'] 	= function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(ContextMenu)",	"http") end,
	['Input.Cancel'] 		= function () emit("GET /xbmcCmds/xbmcHttp?command=SendKey&parameter=257", 							"http") end,
	['Player.Info'] 		= function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(Info)", 		"http") end,
	['Player.OSD'] 			= '', --function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(OSD)", 	"http") end,
	['Player.Aspect']		= function () emit("GET /xbmcCmds/xbmcHttp?command=ExecBuiltIn&parameter=XBMC.Action(AspectRatio)", "http") end,

	--Nonstandard command that are just macros to other commands
	['Player.BigForward']	= function (value, playerId, id) XBMC_CMDS['Player.Seek']("bigforward", playerId, id) end,
	['Player.BigBackward']	= function (value, playerId, id) XBMC_CMDS['Player.Seek']("bigbackward", playerId, id) end,
	['Player.SmallForward']	= function (value, playerId, id) XBMC_CMDS['Player.Seek']("smallforward", playerId, id) end,
	['Player.SmallBackward']= function (value, playerId, id) XBMC_CMDS['Player.Seek']("smallbackward", playerId, id) end,
	['Player.NextSubtitle']	= function (subtitle, playerId, id) XBMC_CMDS['Player.SetSubtitle']("next", playerId, id) end,
	['Player.FastForward']	= function (value, playerId, id) XBMC_CMDS['Player.SetSpeed']("increment", playerId, id) end,
	['Player.Rewind']		= function (value, playerId, id) XBMC_CMDS['Player.SetSpeed']("decrement", playerId, id) end,
}

CMDS_NAVIGATION = {
	['MENU']			= XBMC_CMDS['Input.ContextMenu'],
	['PAGE_UP']			= XBMC_CMDS['Input.PageUp'],
	['PAGE_DOWN']		= XBMC_CMDS['Input.PageDown'],
	['UP'] 				= XBMC_CMDS['Input.Up'],
	['DOWN'] 			= XBMC_CMDS['Input.Down'],
	['LEFT'] 			= XBMC_CMDS['Input.Left'],
	['RIGHT'] 			= XBMC_CMDS['Input.Right'],
	['ENTER'] 			= XBMC_CMDS['Input.Select'],
	['CANCEL'] 			= XBMC_CMDS['Input.Cancel'],
	['RECALL'] 			= XBMC_CMDS['Input.Back'],
	['INFO'] 			= XBMC_CMDS['Player.Info'],
}

CMDS_PLAYER = {
	['NUMBER_0'] 		= '',
	['NUMBER_1'] 		= '',
	['NUMBER_2'] 		= '',
	['NUMBER_3'] 		= '',
	['NUMBER_4'] 		= '',
	['NUMBER_5'] 		= '',
	['NUMBER_6'] 		= '',
	['NUMBER_7'] 		= '',
	['NUMBER_8'] 		= '',
	['NUMBER_9'] 		= '',
	['NUMBER_10'] 		= '',
	['GUIDE']			= XBMC_CMDS['Player.NextSubtitle'],
	['MENU']			= XBMC_CMDS['Player.Aspect'],
	['UP'] 				= XBMC_CMDS['Player.BigForward'],
	['DOWN'] 			= XBMC_CMDS['Player.BigBackward'],
	['LEFT'] 			= XBMC_CMDS['Player.SmallBackward'],
	['RIGHT'] 			= XBMC_CMDS['Player.SmallForward'],
	['ENTER'] 			= XBMC_CMDS['Player.OSD'],
	['CANCEL'] 			= XBMC_CMDS['Input.Cancel'],
	['RECALL'] 			= '',
	['INFO'] 			= XBMC_CMDS['Player.Info'],
	['REPEAT'] 			= '',
	['SHUFFLE'] 		= '',
	['MODE'] 			= '',
	['PLAY'] 			= XBMC_CMDS['Player.PlayPause'],
	['STOP'] 			= XBMC_CMDS['Player.Stop'],
	['PAUSE'] 			= XBMC_CMDS['Player.PlayPause'],
	['SKIP_FWD'] 		= XBMC_CMDS['Player.GoNext'],
	['SKIP_REV'] 		= XBMC_CMDS['Player.GoPrevious'],
	['SCAN_FWD'] 		= XBMC_CMDS['Player.FastForward'],
	['SCAN_REV'] 		= XBMC_CMDS['Player.Rewind'],
	['START_CH_UP'] 	= '',
	['START_CH_DOWN']	= '',
	['PULSE_CH_UP'] 	= '',
	['PULSE_CH_DOWN'] 	= '',
	['PRESET_UP'] 		= '',
	['PRESET_DOWN'] 	= '',
}





REMOTE_BUTTONS = 
{
	['PROGRAM_A']	= "Red Button",
	['PROGRAM_B']	= "Green Button",
	['PROGRAM_C']	= "Yellow Button",
	['PROGRAM_D']	= "Blue Button",

	['GUIDE']		= "Guide",
	['RECALL'] 		= "Prev",
	['PAGE_UP']		= "Page Up",
	['PAGE_DOWN']	= "Page Down",

	['UP'] 			= "Up",
	['DOWN'] 		= "Down",
	['LEFT'] 		= "Left",
	['RIGHT'] 		= "Right",
	['ENTER'] 		= "Enter",

--	['MUTE']		= "Mute",
	['INFO'] 		= "Info",
	['MENU']		= "Menu",
	['CANCEL'] 		= "Cancel",

	['PLAY'] 		= "Play",
	['PAUSE'] 		= "Pause",
	['SKIP_FWD'] 	= "Skip Next",
	['SKIP_REV'] 	= "Skip Previous",
	['SCAN_FWD'] 	= "Fast Forward",
	['SCAN_REV'] 	= "Rewind",
	['STOP'] 		= "Stop",
--	['RECORD']		= "Record",
--	['DVR']			= "DVR",

	['NUMBER_1'] 	= "1",
	['NUMBER_2'] 	= "2",
	['NUMBER_3'] 	= "3",
	['NUMBER_4'] 	= "4",
	['NUMBER_5'] 	= "5",
	['NUMBER_6'] 	= "6",
	['NUMBER_7'] 	= "7",
	['NUMBER_8'] 	= "8",
	['NUMBER_9'] 	= "9",
	['STAR']		= "*",
	['NUMBER_0'] 	= "0",
	['POUND']		= "#",
}






jsonID = 0
function nextJsonID()
	if jsonID >= 1024 then
		jsonID = 0
	end

	jsonID = jsonID + 1

	return jsonID
end


function emit(command, type)
	local bUsePowerOnDelay = false
	local output
	if (strCommandName == 'CONNECT_OUTPUT') then
			bUsePowerOnDelay = true
	end

	if (type == "json") then
		output = Encode (command)
	elseif (type == "http") then
		output = command .. "\r\n\r\n"
	end

	dbg('Emit: ' .. output)

	table.insert(tEmitCommands, {output, bUsePowerOnDelay, type})
	if idEmitCommandsTimer == nil then
		 idEmitCommandsTimer = C4:AddTimer(intraCommandDelayValue, 'MILLISECONDS', true)
	end
end


function OnTimerExpired(idTimer)
	if (idTimer == idEmitCommandsTimer) then
		if idBusyTimer ~= 0 then
			return
		end

		if tEmitCommands[1] ~= nil then
			dbg('SendToNetwork:' .. tEmitCommands[1][1])

			if (tEmitCommands[1][3] == "json") then
				C4:SendToNetwork(6001, tonumber(jsonPort), tEmitCommands[1][1])
			
			elseif (tEmitCommands[1][3] == "http") then
				g_URLPacket = tEmitCommands[1][1]
				C4:NetConnect(6001, tonumber(httpPort))
			end

			if (tEmitCommands[1][2] == true) then
				idBusyTimer = C4:AddTimer(powerOnDelayValue, 'SECONDS', false)
			end
			table.remove(tEmitCommands, 1)
		end

		if tEmitCommands[1] == nil then
			C4:KillTimer(idEmitCommandsTimer)
			idEmitCommandsTimer = nil
		end

		return
	end


	if (idTimer == idBusyTimer) then
		idBusyTimer = C4:KillTimer(idBusyTimer)
	end


	if (idTimer == gPollTimer) then

		dbg("XBMC: polltimer test") 
		-- Send a status query on the main port...
		-- If we haven't gotten a response, increment the 'not checked in'...
		-- if it hits 3, disconnect all ports...
		gLastCheckin = gLastCheckin or 0
		gLastCheckin = gLastCheckin + 1

		if (gLastCheckin > 2) then
			if (mNetConnected == true) then
				C4:NetDisconnect(6001, jsonPort)
				dbg("Failed to receive poll responses from XBMC... Disconnecting...")
			end
		end

		-- Send Poll Packet if we're ONLINE...
		if (mNetConnected == true) then
 			dbg("XBMC: Sending ping request") 
			XBMC_CMDS['JSONRPC.Ping'](nextJsonID())
		end

		return
	end


	if (idTimer == gReconnectTimer) then
		dbg("Attempting to reconnect to XBMC...")

		local bTrying = false
		gReconnectTimer = C4:KillTimer(gReconnectTimer)

		if (gNetworkStatus == "OFFLINE") then
			-- Try to reconnect to the XBMC Control port...
			C4:NetDisconnect(6001, jsonPort)
			C4:NetConnect(6001, jsonPort)
			bTrying = true
		end

		if (bTrying) then
			gReconnectTimer = C4:AddTimer(10, "SECONDS")
		end
	end


	if idTimer == ChannelRampTimerID then
		emit(ChannelCommands, "json")
		return
	end


	if (idTimer == g_DebugTimer) then
		dbg('Turning Debug Mode back to Off [default] (timer expired)')
		C4:UpdateProperty('Debug Mode', 'Off')
		g_debugprint = false
		g_debuglog = false
		g_DebugTimer = C4:KillTimer(g_DebugTimer)
		return
	end
end


function ReceivedFromNetwork(idBinding, nPort, strData)
	dbg('XBMC: Received something from network on binding ' .. idBinding )
	dbg(strData)
	local t = Decode(strData)


 	if (t.method == "AudioLibrary.OnRemove") then
 		return

 	elseif (t.method == "AudioLibrary.OnUpdate") then
		return

	elseif (t.method == "Player.OnPause") then
		return

 	elseif (t.method == "Player.OnPlay") then
 		CurrentPlayerID = t.params['data']['player']['playerid']
		CurrentInputMode = "Player"
 		dbg("XBMC: Player ID is now " .. CurrentPlayerID)
		dbg("Current Input Mode is now Player")
		return

	elseif (t.method == "Player.OnSeek") then
		return

	elseif (t.method == "Player.OnSpeedChanged") then
		return

	elseif (t.method == "Player.OnStop") then
		CurrentPlayerID = 0
		CurrentInputMode = "Navigation"
 		dbg("XBMC: Player ID is now " .. CurrentPlayerID)
		dbg("Current Input Mode is now Navigation")
		return

	elseif (t.method == "System.OnLowBattery") then
		return

	elseif (t.method == "System.OnQuit") then
		return

	elseif (t.method == "System.OnRestart") then
		return

	elseif (t.method == "System.OnSleep") then
		return

	elseif (t.method == "System.OnWake") then
		return

	elseif (t.method == "VideoLibrary.OnRemove") then
		return

	elseif (t.method == "VideoLibrary.OnUpdate") then
		return
	end


 	if (t.result == "pong") then
 		dbg("Resetting checkin counter")
 		gLastCheckin = 0
 		return
 	end
end


function OnConnectionStatusChanged(idBinding, nPort, strStatus)
	dbg("XBMC: OnConnectionStatusChanged[" .. idBinding .. " (" .. nPort .. ")]: " .. strStatus)

	if (idBinding == 6001) then
		if (nPort == tonumber(jsonPort)) then
			gNetworkStatus=strStatus

			if (strStatus == "ONLINE") then
				mNetConnected = true
				gLastCheckin=0
				C4:UpdateProperty('Connected To Network','true')
				dbg("Connected to XBMC...")

				if (gPollTimer ~= 0) then C4:KillTimer(gPollTimer) end

				gPollTimer = C4:AddTimer(5, "SECONDS", true) -- 5 second repeating timer...
			else
				dbg("XBMC: not connected.")
				mNetConnected = false
				C4:UpdateProperty('Connected To Network','false')

				-- Try a re-connect of the device ...
				if (gReconnectTimer == nil) or (gReconnectTimer == 0) then
					gReconnectTimer = C4:AddTimer(10, "SECONDS")
					C4:NetDisconnect(6001, tonumber(jsonPort))
					C4:NetConnect(6001, tonumber(jsonPort))
				end
			end
		elseif (nPort == tonumber(httpPort)) then
			gNetworkStatus=strStatus

			if (strStatus == "ONLINE") then
				C4:SendToNetwork(6001, tonumber(httpPort), g_URLPacket)
				C4:NetDisconnect(6001, tonumber(httpPort))
			end
		end
	end
end


function ReceivedFromProxy(idBinding, strCommand, tParams)
	dbg('XBMC: ReceivedFromProxy: ' .. strCommand)

	if (CurrentInputMode == "Player") then
		CMDS_PLAYER[strCommand]()

	elseif (CurrentInputMode == "Navigation") then
		CMDS_NAVIGATION[strCommand]()
	end
end


function ExecuteCommand(Command, Parameters)
	dbg('XBMC: ExecuteCommand: ' .. Command)
end


function OnDriverDestroyed()
	if (idEmitCommandsTimer) then
		idEmitCommandsTimer = C4:KillTimer(idEmitCommandsTimer)
		idEmitCommandsTimer = nil
	end

	if (g_DebugTimer) then g_DebugTimer = C4:KillTimer(g_DebugTimer) end
	if (gReconnectTimer ~= nil) then gReconnectTimer = C4:KillTimer(gReconnectTimer) end
	if (gPollTimer ~= nil) then gPollTimer = C4:KillTimer(gPollTimer) end
end


function dbg(strDebugText)
	if (g_debugprint) then print(strDebugText) end
	if (g_debuglog) then C4:ErrorLog(strDebugText) end
end


function startDebugTimer()
	if (g_DebugTimer) then
		g_DebugTimer = C4:KillTimer(g_DebugTimer)
	end
	g_DebugTimer = C4:AddTimer(15, 'MINUTES')
end


function startDebugTimer()
	if (g_DebugTimer) then
		g_DebugTimer = C4:KillTimer(g_DebugTimer)
	end
	g_DebugTimer = C4:AddTimer(15, 'MINUTES')
end


function OnPropertyChanged(strProperty)
	if (strProperty == 'Debug Mode') then
		if (Properties[strProperty] == 'Off') then
			g_debugprint = false
			g_debuglog = false
			g_DebugTimer = C4:KillTimer(g_DebugTimer)
			g_DebugTimer = 0
		end
		if (Properties[strProperty] == 'Print') then
			g_debugprint = true
			g_debuglog = false
			startDebugTimer()
		end
		if (Properties[strProperty] == 'Log') then
			g_debugprint = false
			g_debuglog = true
			startDebugTimer()
		end
		if (Properties[strProperty] == 'Print and Log') then
			g_debugprint = true
			g_debuglog = true
			startDebugTimer()
		end

	elseif (strProperty == 'JSON-RPC Port') then
		jsonPort = tonumber(Properties['JSON-RPC Port'])
	end
end































































--[[

 JSON Encoder and Parser for Lua 5.1

 Copyright © 2007 Shaun Brown (http://www.chipmunkav.com).
 All Rights Reserved.

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or
 sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.
 If you find this software useful please give www.chipmunkav.com a mention.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

 Usage:

 -- Lua script:
 local t = {
	["name1"] = "value1",
	["name2"] = {1, false, true, 23.54, "a \021 string"},
	name3 = Json.Null()
 }

 local json = Json.Encode (t)
 print (json)
 --> {"name1":"value1","name3":null,"name2":[1,false,true,23.54,"a \u0015 string"]}

 local t = Json.Decode(json)
 print(t.name2[4])
 --> 23.54

 Notes:
 1) Encodable Lua types: string, number, boolean, table, nil
 2) Use Json.Null() to insert a null value into a Json object
 3) All control chars are encoded to \uXXXX format eg "\021" encodes to "\u0015"
 4) All Json \uXXXX chars are decoded to chars (0-255 byte range only)
 5) Json single line // and /* */ block comments are discarded during decoding
 6) Numerically indexed Lua arrays are encoded to Json Lists eg [1,2,3]
 7) Lua dictionary tables are converted to Json objects eg {"one":1,"two":2}
 8) Json nulls are decoded to Lua nil and treated by Lua in the normal way

--]]
local string = string
local math = math
local table = table
local error = error
local tonumber = tonumber
local tostring = tostring
local type = type
local setmetatable = setmetatable
local pairs = pairs
local ipairs = ipairs
local assert = assert
local Chipmunk = Chipmunk

--module("Json")

local StringBuilder = {
	buffer = {}
}

function StringBuilder:New()
	local o = {}
	setmetatable(o, self)
	self.__index = self
	o.buffer = {}
	return o
end

function StringBuilder:Append(s)
	self.buffer[#self.buffer+1] = s
end

function StringBuilder:ToString()
	return table.concat(self.buffer)
end

local JsonWriter = {
	backslashes = {
		['\b'] = "\\b",
		['\t'] = "\\t",
		['\n'] = "\\n",
		['\f'] = "\\f",
		['\r'] = "\\r",
		['"']  = "\\\"",
		['\\'] = "\\\\",
		['/']  = "\\/"
	}
}

function JsonWriter:New()
	local o = {}
	o.writer = StringBuilder:New()
	setmetatable(o, self)
	self.__index = self
	return o
end

function JsonWriter:Append(s)
	self.writer:Append(s)
end

function JsonWriter:ToString()
	return self.writer:ToString()
end

function JsonWriter:Write(o)
	local t = type(o)
	if t == "nil" then
		self:WriteNil()
	elseif t == "boolean" then
		self:WriteString(o)
	elseif t == "number" then
		self:WriteString(o)
	elseif t == "string" then
		self:ParseString(o)
	elseif t == "table" then
		self:WriteTable(o)
	elseif t == "function" then
		self:WriteFunction(o)
	elseif t == "thread" then
		self:WriteError(o)
	elseif t == "userdata" then
		self:WriteError(o)
	end
end

function JsonWriter:WriteNil()
	self:Append("null")
end

function JsonWriter:WriteString(o)
	self:Append(tostring(o))
end

function JsonWriter:ParseString(s)
	self:Append('"')
	self:Append(string.gsub(s, "[%z%c\\\"/]", function(n)
		local c = self.backslashes[n]
		if c then return c end
		return string.format("\\u%.4X", string.byte(n))
	end))
	self:Append('"')
end

function JsonWriter:IsArray(t)
	local count = 0
	local isindex = function(k)
		if type(k) == "number" and k > 0 then
			if math.floor(k) == k then
				return true
			end
		end
		return false
	end
	for k,v in pairs(t) do
		if not isindex(k) then
			return false, '{', '}'
		else
			count = math.max(count, k)
		end
	end
	return true, '[', ']', count
end

function JsonWriter:WriteTable(t)
	local ba, st, et, n = self:IsArray(t)
	self:Append(st)
	if ba then
		for i = 1, n do
			self:Write(t[i])
			if i < n then
				self:Append(',')
			end
		end
	else
		local first = true;
		for k, v in pairs(t) do
			if not first then
				self:Append(',')
			end
			first = false;
			self:ParseString(k)
			self:Append(':')
			self:Write(v)
		end
	end
	self:Append(et)
end

function JsonWriter:WriteError(o)
	error(string.format(
		"Encoding of %s unsupported",
		tostring(o)))
end

function JsonWriter:WriteFunction(o)
	if o == Null then
		self:WriteNil()
	else
		self:WriteError(o)
	end
end

local StringReader = {
	s = "",
	i = 0
}

function StringReader:New(s)
	local o = {}
	setmetatable(o, self)
	self.__index = self
	o.s = s or o.s
	return o
end

function StringReader:Peek()
	local i = self.i + 1
	if i <= #self.s then
		return string.sub(self.s, i, i)
	end
	return nil
end

function StringReader:Next()
	self.i = self.i+1
	if self.i <= #self.s then
		return string.sub(self.s, self.i, self.i)
	end
	return nil
end

function StringReader:All()
	return self.s
end

local JsonReader = {
	escapes = {
		['t'] = '\t',
		['n'] = '\n',
		['f'] = '\f',
		['r'] = '\r',
		['b'] = '\b',
	}
}

function JsonReader:New(s)
	local o = {}
	o.reader = StringReader:New(s)
	setmetatable(o, self)
	self.__index = self
	return o;
end

function JsonReader:Read()
	self:SkipWhiteSpace()
	local peek = self:Peek()
	if peek == nil then
		error(string.format(
			"Nil string: '%s'",
			self:All()))
	elseif peek == '{' then
		return self:ReadObject()
	elseif peek == '[' then
		return self:ReadArray()
	elseif peek == '"' then
		return self:ReadString()
	elseif string.find(peek, "[%+%-%d]") then
		return self:ReadNumber()
	elseif peek == 't' then
		return self:ReadTrue()
	elseif peek == 'f' then
		return self:ReadFalse()
	elseif peek == 'n' then
		return self:ReadNull()
	elseif peek == '/' then
		self:ReadComment()
		return self:Read()
	else
		error(string.format(
			"Invalid input: '%s'",
			self:All()))
	end
end

function JsonReader:ReadTrue()
	self:TestReservedWord{'t','r','u','e'}
	return true
end

function JsonReader:ReadFalse()
	self:TestReservedWord{'f','a','l','s','e'}
	return false
end

function JsonReader:ReadNull()
	self:TestReservedWord{'n','u','l','l'}
	return nil
end

function JsonReader:TestReservedWord(t)
	for i, v in ipairs(t) do
		if self:Next() ~= v then
			 error(string.format(
				"Error reading '%s': %s",
				table.concat(t),
				self:All()))
		end
	end
end

function JsonReader:ReadNumber()
        local result = self:Next()
        local peek = self:Peek()
        while peek ~= nil and string.find(
		peek,
		"[%+%-%d%.eE]") do
            result = result .. self:Next()
            peek = self:Peek()
	end
	result = tonumber(result)
	if result == nil then
	        error(string.format(
			"Invalid number: '%s'",
			result))
	else
		return result
	end
end

function JsonReader:ReadString()
	local result = ""
	assert(self:Next() == '"')
        while self:Peek() ~= '"' do
		local ch = self:Next()
		if ch == '\\' then
			ch = self:Next()
			if self.escapes[ch] then
				ch = self.escapes[ch]
			end
		end
                result = result .. ch
	end
        assert(self:Next() == '"')
	local fromunicode = function(m)
		return string.char(tonumber(m, 16))
	end
	return string.gsub(
		result,
		"u%x%x(%x%x)",
		fromunicode)
end

function JsonReader:ReadComment()
        assert(self:Next() == '/')
        local second = self:Next()
        if second == '/' then
            self:ReadSingleLineComment()
        elseif second == '*' then
            self:ReadBlockComment()
        else
            error(string.format(
		"Invalid comment: %s",
		self:All()))
	end
end

function JsonReader:ReadBlockComment()
	local done = false
	while not done do
		local ch = self:Next()
		if ch == '*' and self:Peek() == '/' then
			done = true
                end
		if not done and
			ch == '/' and
			self:Peek() == "*" then
                    error(string.format(
			"Invalid comment: %s, '/*' illegal.",
			self:All()))
		end
	end
	self:Next()
end

function JsonReader:ReadSingleLineComment()
	local ch = self:Next()
	while ch ~= '\r' and ch ~= '\n' do
		ch = self:Next()
	end
end

function JsonReader:ReadArray()
	local result = {}
	assert(self:Next() == '[')
	local done = false
	if self:Peek() == ']' then
		done = true;
	end
	while not done do
		local item = self:Read()
		result[#result+1] = item
		self:SkipWhiteSpace()
		if self:Peek() == ']' then
			done = true
		end
		if not done then
			local ch = self:Next()
			if ch ~= ',' then
				error(string.format(
					"Invalid array: '%s' due to: '%s'",
					self:All(), ch))
			end
		end
	end
	assert(']' == self:Next())
	return result
end

function JsonReader:ReadObject()
	local result = {}
	assert(self:Next() == '{')
	local done = false
	if self:Peek() == '}' then
		done = true
	end
	while not done do
		local key = self:Read()
		if type(key) ~= "string" then
			error(string.format(
				"Invalid non-string object key: %s",
				key))
		end
		self:SkipWhiteSpace()
		local ch = self:Next()
		if ch ~= ':' then
			error(string.format(
				"Invalid object: '%s' due to: '%s'",
				self:All(),
				ch))
		end
		self:SkipWhiteSpace()
		local val = self:Read()
		result[key] = val
		self:SkipWhiteSpace()
		if self:Peek() == '}' then
			done = true
		end
		if not done then
			ch = self:Next()
                	if ch ~= ',' then
				error(string.format(
					"Invalid array: '%s' near: '%s'",
					self:All(),
					ch))
			end
		end
	end
	assert(self:Next() == "}")
	return result
end

function JsonReader:SkipWhiteSpace()
	local p = self:Peek()
	while p ~= nil and string.find(p, "[%s/]") do
		if p == '/' then
			self:ReadComment()
		else
			self:Next()
		end
		p = self:Peek()
	end
end

function JsonReader:Peek()
	return self.reader:Peek()
end

function JsonReader:Next()
	return self.reader:Next()
end

function JsonReader:All()
	return self.reader:All()
end

function Encode(o)
	local writer = JsonWriter:New()
	writer:Write(o)
	return writer:ToString()
end

function Decode(s)
	local reader = JsonReader:New(s)
	return reader:Read()
end

function Null()
	return Null
end
]]>


		</script>
	</config>
</devicedata>
