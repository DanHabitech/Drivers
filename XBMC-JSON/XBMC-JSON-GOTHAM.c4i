<devicedata>
  <c4id>cf964826-c9e2-477f-b755-0010d5581f0c</c4id>
  <copyright>Copyright 2012 Brandon Johnson</copyright>
  <creator>Brandon Johnson</creator>
  <manufacturer>XBMC.ORG</manufacturer>
  <name>XBMC</name>
  <model>XBMC HTPC</model>
  <created>01/28/2012 12:00 AM</created>
  <modified>05/30/2013 12:00 AM</modified>
  <version>3</version>
  <small>devices_sm\receiver.gif</small>
  <large>devices_lg\receiver.gif</large>
  <top>
  </top>
  <bottom>
  </bottom>
  <front>
  </front>
  <back>
  </back>
  <left>
  </left>
  <right>
  </right>
  <control>lua_gen</control>
  <controlmethod>ip</controlmethod>
  <driver>DriverWorks</driver>
  <search_type>c4:av_gen</search_type>
  <proxies qty="1">
    <proxy proxybindingid="5001">media_player</proxy>
  </proxies>
  <connections>
    <connection proxybindingid="5001">
      <id>2000</id>
      <facing>6</facing>
      <connectionname>OUTPUT</connectionname>
      <type>5</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>True</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>VGA</classname>
        </class>
        <class>
          <classname>HDMI</classname>
        </class>
        <class>
          <classname>DVI</classname>
        </class>
        <class>
          <classname>SVIDEO</classname>
        </class>
        <class>
          <classname>COMPOSITE</classname>
        </class>
        <class>
          <classname>COMPONENT</classname>
        </class>
      </classes>
    </connection>
    <connection proxybindingid="5001">
      <id>4000</id>
      <facing>6</facing>
      <connectionname>OUTPUT</connectionname>
      <type>6</type>
      <consumer>False</consumer>
      <audiosource>True</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>DIGITAL_COAX</classname>
        </class>
        <class>
          <classname>DIGITAL_OPTICAL</classname>
        </class>
        <class>
          <classname>STEREO</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>5001</id>
      <facing>6</facing>
      <connectionname>MEDIA_PLAYER</connectionname>
      <type>2</type>
      <consumer>False</consumer>
      <audiosource>False</audiosource>
      <videosource>True</videosource>
      <linelevel>False</linelevel>
      <classes>
        <class>
          <classname>MEDIA_PLAYER</classname>
        </class>
      </classes>
    </connection>
    <connection>
      <id>6001</id>
      <facing>6</facing>
      <connectionname>XBMC IP Connection</connectionname>
      <type>4</type>
      <consumer>True</consumer>
      <audiosource>False</audiosource>
      <videosource>False</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>TCP</classname>
          <ports>
            <port>
              <number>9090</number>
              <auto_connect>True</auto_connect>
              <monitor_connection>True</monitor_connection>
              <keep_connection>True</keep_connection>
            </port>
          </ports>
        </class>
      </classes>
    </connection>
    <connection proxybindingid="5001">
      <id>7000</id>
      <facing>6</facing>
      <connectionname>Room Selection - OUTPUT</connectionname>
      <type>7</type>
      <consumer>False</consumer>
      <audiosource>True</audiosource>
      <videosource>True</videosource>
      <linelevel>True</linelevel>
      <classes>
        <class>
          <classname>VIDEO_SELECTION</classname>
        </class>
        <class>
          <classname>AUDIO_VOLUME</classname>
        </class>
        <class>
          <classname>AUDIO_SELECTION</classname>
        </class>
      </classes>
    </connection>
  </connections>
  <config>
    <power_management_method>AlwaysOn</power_management_method>
    <power_command_delay>0</power_command_delay>
    <power_delay>0</power_delay>
    <power_command_needed>False</power_command_needed>
    
    <documentation>
Make sure the "Allow programs on other systems to control XBMC" setting in the network settings of XBMC is enabled

Keymap
---------------------------------------------------------------------------------------
|.Button....|.Navigation...|.Video.Playback......|.Audio.Playback....|.Picture.Viewer.|
---------------------------------------------------------------------------------------
|.Red.......|..............|.....................|...................|................|
|.Green.....|..............|.....................|...................|................|
|.Yellow....|..............|.....................|...................|................|
|.Blue......|..............|.....................|...................|................|
|-----------|--------------------------------------------------------|----------------|
|.GUIDE.....|..............|.....................|.Toggle.Visualizer.|................|
|.RECALL....|.Go.Back......|.....................|...................|................|
|.PAGE.UP...|.Page.Up......|.....................|...................|................|
|.PAGE.DOWN.|.Page.Down....|.....................|...................|................|
|-----------|--------------|---------------------|-------------------|----------------|
|.UP........|.Move.Up......|.Big.Step.Forward....|.Move.Up...........|................|
|.DOWN......|.Move.Down....|.Big.Step.Backward...|.Move.Down.........|................|
|.LEFT......|.Move.Left....|.Small.Step.Backward.|.Move.Left.........|................|
|.RIGHT.....|.Move.Right...|.Small.Step.Forward..|.Move.Right........|................|
|.ENTER	....|.Select.......|.Show.OSD............|.Select............|................|
|-----------|--------------|---------------------|-------------------|----------------|
|.INFO......|.Show.Info....|.Show.Info...........|.Show.Info.........|................|
|.MENU......|.Context.Menu.|.....................|...................|................|
|.CANCEL....|.Go.Back......|.....................|...................|................|
|-----------|--------------|---------------------|-------------------|----------------|
|.PLAY......|..............|.Play/Pause..........|.Play/Pause........|................|
|.PAUSE.....|..............|.Play/Pause..........|.Play/Pause........|................|
|.STOP......|..............|.Stop................|.Stop..............|................|
|-----------|--------------|---------------------|-------------------|----------------|
|.SKIP.FWD..|..............|.Skip.Next...........|.Skip.Next.........|................|
|.SKIP.REV..|..............|.Skip.Previous.......|.Skip.Previous.....|................|
|.SCAN.FWD..|..............|.Fast.Forward........|.Fast.Forward......|................|
|.SCAN.REV..|..............|.Rewind..............|.Rewind............|................|
|-----------|--------------|---------------------|-------------------|----------------|
|.NUMBER.1..|.1............|.....................|...................|................|
|.NUMBER.2..|.2./.ABC......|.....................|...................|................|
|.NUMBER.3..|.3./.DEF......|.....................|...................|................|
|.NUMBER.4..|.4./.GHI......|.....................|...................|................|
|.NUMBER.5..|.5./.JKL......|.....................|...................|................|
|.NUMBER.6..|.6./.MNO......|.....................|...................|................|
|.NUMBER.7..|.7./.PQRS.....|.....................|...................|................|
|.NUMBER.8..|.8./.TUV......|.....................|...................|................|
|.NUMBER.9..|.9./.WXYZ.....|.....................|...................|................|
|.STAR......|..............|.....................|...................|................|
|.NUMBER.0..|.0............|.....................|...................|................|
|.POUND.....|..............|.....................|...................|................|
---------------------------------------------------------------------------------------

		</documentation>
    
    <actions>
      <action>
        <name>Destroy All Timers</name>
        <command>Destroy Timers</command>
      </action>
    </actions>
    
    <properties>
      <property>
        <name>Version</name>
        <type>STRING</type>
        <default>0.0.0</default>
        <readonly>true</readonly>
      </property>

      <property>
        <name>Command Delay-Milliseconds</name>
        <type>RANGED_INTEGER</type>
        <readonly>False</readonly>
        <default>50</default>
        <minimum>50</minimum>
        <maximum>2500</maximum>
      </property>
      
      <property>
        <name>Power On Delay-Seconds</name>
        <type>RANGED_INTEGER</type>
        <readonly>False</readonly>
        <default>5</default>
        <minimum>0</minimum>
        <maximum>25</maximum>
      </property>

      <property>
        <name>Volume Ramp Delay-Milliseconds</name>
        <type>RANGED_INTEGER</type>
        <readonly>False</readonly>
        <default>100</default>
        <minimum>50</minimum>
        <maximum>500</maximum>
      </property>
      
      <property>
        <name>Debug Mode</name>
        <type>LIST</type>
        <readonly>False</readonly>
        <default>Print and Log</default>
        <items>
          <item>Off</item>
          <item>Print</item>
          <item>Log</item>
          <item>Print and Log</item>
        </items>
      </property>

      <property>
        <name>Connected To Network</name>
        <type>STRING</type>
        <readonly>True</readonly>
        <default>false</default>
      </property>

      <property>
        <name>Wake on LAN</name>
        <type>LIST</type>
        <readonly>False</readonly>
        <default>Disabled</default>
        <items>
          <item>Disabled</item>
          <item>Enabled</item>
        </items>
      </property>

      <property>
        <name>XBMC MAC Address</name>
        <type>STRING</type>
        <readonly>false</readonly>
        <default></default>
      </property>

      <property>
        <name>Room Off Command</name>
        <type>LIST</type>
        <readonly>False</readonly>
        <default>Does Nothing</default>
        <items>
          <item>Do Nothing</item>
          <item>Quit XBMC</item>
          <item>Shutdown System</item>
          <item>Suspend System</item>
          <item>Hibernate System</item>
          <item>Reboot System</item>
        </items>
      </property>
    </properties>
    
    <script>
      <![CDATA[   


function version() -- Driver Version
  local maj = 0
  local min = 0
  local rev = 28
  local ver = string.format("%d.%d.%d", maj, min, rev)

  return ver
end


require "json"
JSON=(loadstring(json.JSON_LIBRARY_CHUNK))()

g_debugprint = true
g_debuglog = true
g_debugTimer = 0;

jsonID = 0

gPollTimer = 0
idConnectToNetworkTimer = 0
tPendingCommands = {}
tEmitCommands = {}
idBusyTimer = 0
g_PowerState = {}
g_URLPacket = ""
jsonPort = 9090
mNetConnected = tostring(Properties['Connected To Network'])
intraCommandDelayValue = Properties['Command Delay-Milliseconds']
intraVolRampDelayValue = Properties['Volume Ramp Delay-Milliseconds']
CurrentInputMode = "NAVIGATION"
CurrentPlayerID = 0
C4:CreateNetworkConnection (6003, "255.255.255.255", 9)


function nextJsonID()
  if jsonID >= 1024 then
    jsonID = 0
  end

  jsonID = jsonID + 1
  return jsonID
end


XBMC_NAVIGATION_ACTIONS = {}
XBMC_NAVIGATION_ACTIONS["Ping"]                = function() return { ["method"] = "JSONRPC.Ping", ["id"] = nextJsonID() } end
XBMC_NAVIGATION_ACTIONS["Get Active Players"]  = function() return { ["method"] = "Player.GetActivePlayers", ["id"] = nextJsonID() } end
XBMC_NAVIGATION_ACTIONS["Show OSD"]            = function() return { ["method"] = "Input.ShowOSD" } end
XBMC_NAVIGATION_ACTIONS["Eject Optical Drive"] = function() return { ["method"] = "System.EjectOpticalDrive" } end
XBMC_NAVIGATION_ACTIONS["Fullscreen"]          = function() return { ["method"] = "GUI.SetFullscreen",   ["id"] = nextJsonID(),  ["params"] = { ["fullscreen"] = "toggle",}} end
XBMC_NAVIGATION_ACTIONS["Home"]                = function() return { ["method"] = "Input.Home" }   end
XBMC_NAVIGATION_ACTIONS["Back"]                = function() return { ["method"] = "Input.Back" } end
XBMC_NAVIGATION_ACTIONS["Up"]                  = function() return { ["method"] = "Input.Up" } end
XBMC_NAVIGATION_ACTIONS["Down"]                = function() return { ["method"] = "Input.Down" } end
XBMC_NAVIGATION_ACTIONS["Left"]                = function() return { ["method"] = "Input.Left" } end
XBMC_NAVIGATION_ACTIONS["Right"]               = function() return { ["method"] = "Input.Right" } end
XBMC_NAVIGATION_ACTIONS["Select"]              = function() return { ["method"] = "Input.Select" } end
XBMC_NAVIGATION_ACTIONS["Context Menu"]        = function() return { ["method"] = "Input.ContextMenu" } end
XBMC_NAVIGATION_ACTIONS["Info"]                = function() return { ["method"] = "Input.Info" } end
XBMC_NAVIGATION_ACTIONS["Page Up"]             = function() return { ["method"] = "Input.ExecuteAction",  ["params"] = { ["action"] = "pageup" } }  end
XBMC_NAVIGATION_ACTIONS["Page Down"]           = function() return { ["method"] = "Input.ExecuteAction", ["params"] = { ["action"] = "pagedown" } } end
XBMC_NAVIGATION_ACTIONS["Clean Audio Library"] = function() return { ["method"] = "AudioLibrary.Clean"  }  end
XBMC_NAVIGATION_ACTIONS["Scan Audio Library"]  = function() return { ["method"] = "AudioLibrary.Scan" }  end
XBMC_NAVIGATION_ACTIONS["Clean Video Library"] = function() return { ["method"] = "VideoLibrary.Clean" }  end
XBMC_NAVIGATION_ACTIONS["Scan Video Library"]  = function() return { ["method"] = "VideoLibrary.Scan" } end
XBMC_NAVIGATION_ACTIONS["Quit XBMC"]           = function() return { ["method"] = "Application.Quit"  } end
XBMC_NAVIGATION_ACTIONS["Suspend System"]      = function() return { ["method"] = "System.Suspend"} end
XBMC_NAVIGATION_ACTIONS["Hibernate System"]    = function() return { ["method"] = "System.Hibernate"} end
XBMC_NAVIGATION_ACTIONS["Reboot System"]       = function() return { ["method"] = "System.Reboot" } end
XBMC_NAVIGATION_ACTIONS["Shutdown System"]     = function() return { ["method"] = "System.Shutdown" } end

XBMC_VIDEO_ACTIONS = {}
XBMC_VIDEO_ACTIONS["Ping"]                = function() return { ["method"] = "JSONRPC.Ping",            ["id"] = nextJsonID() } end
XBMC_VIDEO_ACTIONS["Get Active Players"]  = function() return { ["method"] = "Player.GetActivePlayers", ["id"] = nextJsonID() } end
XBMC_VIDEO_ACTIONS["Show OSD"]            = function() return { ["method"] = "Input.ShowOSD" } end
XBMC_VIDEO_ACTIONS["Eject Optical Drive"] = function() return { ["method"] = "System.EjectOpticalDrive" } end
XBMC_VIDEO_ACTIONS["Fullscreen"]          = function() return { ["method"] = "GUI.SetFullscreen",       ["id"] = nextJsonID(),  ["params"] = { ["fullscreen"] = "toggle",}} end
XBMC_VIDEO_ACTIONS["Next Subtitle"]       = function() return { ["method"] = "Player.SetSubtitle",      ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["subtitle"] = "next" }} end
XBMC_VIDEO_ACTIONS["Big Step Forward"]    = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "bigforward" }} end
XBMC_VIDEO_ACTIONS["Big Step Backward"]   = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "bigbackward" }} end
XBMC_VIDEO_ACTIONS["Small Step Forward"]  = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "smallforward" }} end
XBMC_VIDEO_ACTIONS["Small Step Backward"] = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "smallbackward" }} end
XBMC_VIDEO_ACTIONS["Play Pause"]          = function() return { ["method"] = "Player.PlayPause",        ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID }} end
XBMC_VIDEO_ACTIONS["Stop"]                = function() return { ["method"] = "Player.Stop",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID }} end
XBMC_VIDEO_ACTIONS["Skip Next"]           = function() return { ["method"] = "Player.GoTo",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["to"] = "next"}} end
XBMC_VIDEO_ACTIONS["Skip Previous"]       = function() return { ["method"] = "Player.GoTo",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["to"] = "previous"}}  end
XBMC_VIDEO_ACTIONS["Fast Forward"]        = function() return { ["method"] = "Player.SetSpeed",         ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["speed"] = "increment" }} end
XBMC_VIDEO_ACTIONS["Rewind"]              = function() return { ["method"] = "Player.SetSpeed",         ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["speed"] = "decrement"}} end

XBMC_MUSIC_ACTIONS = {}
XBMC_MUSIC_ACTIONS["Ping"]                = function() return { ["method"] = "JSONRPC.Ping",            ["id"] = nextJsonID() } end
XBMC_MUSIC_ACTIONS["Get Active Players"]  = function() return { ["method"] = "Player.GetActivePlayers", ["id"] = nextJsonID() } end
XBMC_MUSIC_ACTIONS["Show OSD"]            = function() return { ["method"] = "Input.ShowOSD" } end
XBMC_MUSIC_ACTIONS["Eject Optical Drive"] = function() return { ["method"] = "System.EjectOpticalDrive" } end
XBMC_MUSIC_ACTIONS["Fullscreen"]          = function() return { ["method"] = "GUI.SetFullscreen",       ["id"] = nextJsonID(),  ["params"] = { ["fullscreen"] = "toggle",}} end
XBMC_MUSIC_ACTIONS["Big Step Forward"]    = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "bigforward" }} end
XBMC_MUSIC_ACTIONS["Big Step Backward"]   = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "bigbackward" }} end
XBMC_MUSIC_ACTIONS["Small Step Forward"]  = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "smallforward" }} end
XBMC_MUSIC_ACTIONS["Small Step Backward"] = function() return { ["method"] = "Player.Seek",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["value"] = "smallbackward" }} end
XBMC_MUSIC_ACTIONS["Play Pause"]          = function() return { ["method"] = "Player.PlayPause",        ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID }} end
XBMC_MUSIC_ACTIONS["Stop"]                = function() return { ["method"] = "Player.Stop",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID }} end
XBMC_MUSIC_ACTIONS["Skip Next"]           = function() return { ["method"] = "Player.GoTo",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["to"] = "next"}} end
XBMC_MUSIC_ACTIONS["Skip Previous"]       = function() return { ["method"] = "Player.GoTo",             ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["to"] = "previous"}} end
XBMC_MUSIC_ACTIONS["Fast Forward"]        = function() return { ["method"] = "Player.SetSpeed",         ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["speed"] = "increment" }} end
XBMC_MUSIC_ACTIONS["Rewind"]              = function() return { ["method"] = "Player.SetSpeed",         ["id"] = nextJsonID(),  ["params"] = { ["playerid"] = CurrentPlayerID, ["speed"] = "decrement"}} end

XBMC_PICTURE_ACTIONS = {}
XBMC_PICTURE_ACTIONS["Ping"]              = function() return { ["method"] = "JSONRPC.Ping",            ["id"] = nextJsonID() } end
XBMC_PICTURE_ACTIONS["Get Active Players"]= function() return { ["method"] = "Player.GetActivePlayers", ["id"] = nextJsonID() } end
XBMC_PICTURE_ACTIONS["Show OSD"]          = function() return { ["method"] = "Input.ShowOSD" } end
XBMC_PICTURE_ACTIONS["Eject Optical Drive"] = function() return { ["method"] = "System.EjectOpticalDrive" } end
XBMC_PICTURE_ACTIONS["Fullscreen"]        = function() return { ["method"] = "GUI.SetFullscreen",       ["id"] = nextJsonID(),  ["params"] = { ["fullscreen"] = "toggle",}} end

XBMC_TV_ACTIONS = {}
XBMC_TV_ACTIONS["Ping"]                = function() return { ["method"] = "JSONRPC.Ping", ["id"] = nextJsonID() } end
XBMC_TV_ACTIONS["Get Active Players"]  = function() return { ["method"] = "Player.GetActivePlayers", ["id"] = nextJsonID() } end
XBMC_TV_ACTIONS["Show OSD"]            = function() return { ["method"] = "Input.ShowOSD" } end
XBMC_TV_ACTIONS["Eject Optical Drive"] = function() return { ["method"] = "System.EjectOpticalDrive" } end
XBMC_TV_ACTIONS["Fullscreen"]          = function() return { ["method"] = "GUI.SetFullscreen",   ["id"] = nextJsonID(),  ["params"] = { ["fullscreen"] = "toggle"}} end
XBMC_TV_ACTIONS["Home"]                = function() return { ["method"] = "Input.Home" }   end
XBMC_TV_ACTIONS["Back"]                = function() return { ["method"] = "Input.Back" } end
XBMC_TV_ACTIONS["Up"]                  = function() return { ["method"] = "Input.Up" } end
XBMC_TV_ACTIONS["Down"]                = function() return { ["method"] = "Input.Down" } end
XBMC_TV_ACTIONS["Left"]                = function() return { ["method"] = "Input.Left" } end
XBMC_TV_ACTIONS["Right"]               = function() return { ["method"] = "Input.Right" } end
XBMC_TV_ACTIONS["Select"]              = function() return { ["method"] = "Input.Select" } end
XBMC_TV_ACTIONS["Context Menu"]        = function() return { ["method"] = "Input.ContextMenu" }  end
XBMC_TV_ACTIONS["Info"]                = function() return { ["method"] = "Input.Info" } end
XBMC_TV_ACTIONS["Page Up"]             = function() return { ["method"] = "Input.ExecuteAction",  ["params"] = { ["action"] = "pageup" } }  end
XBMC_TV_ACTIONS["Page Down"]           = function() return { ["method"] = "Input.ExecuteAction", ["params"] = { ["action"] = "pagedown" } } end
XBMC_TV_ACTIONS["Clean Audio Library"] = function() return { ["method"] = "AudioLibrary.Clean"  } end
XBMC_TV_ACTIONS["Scan Audio Library"]  = function() return { ["method"] = "AudioLibrary.Scan" } end
XBMC_TV_ACTIONS["Clean Video Library"] = function() return { ["method"] = "VideoLibrary.Clean" } end
XBMC_TV_ACTIONS["Scan Video Library"]  = function() return { ["method"] = "VideoLibrary.Scan" } end
XBMC_TV_ACTIONS["Quit XBMC"]           = function() return { ["method"] = "Application.Quit"  } end
XBMC_TV_ACTIONS["Suspend System"]      = function() return { ["method"] = "System.Suspend"} end
XBMC_TV_ACTIONS["Hibernate System"]    = function() return { ["method"] = "System.Hibernate"} end
XBMC_TV_ACTIONS["Reboot System"]       = function() return { ["method"] = "System.Reboot" } end
XBMC_TV_ACTIONS["Shutdown System"]     = function() return { ["method"] = "System.Shutdown" } end


REMOTE_BUTTONS = {
  ['PROGRAM_A']   = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PROGRAM_B']   = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PROGRAM_C']   = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PROGRAM_D']   = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  
  ['GUIDE']       = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS["Fullscreen"],     XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['RECALL']      = { XBMC_NAVIGATION_ACTIONS["Back"],          XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PAGE_UP']     = { XBMC_NAVIGATION_ACTIONS["Page Up"],       XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PAGE_DOWN']   = { XBMC_NAVIGATION_ACTIONS["Page Down"],     XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },

  ['UP']          = { XBMC_NAVIGATION_ACTIONS["Up"],            XBMC_VIDEO_ACTIONS["Big Step Forward"],     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['DOWN']        = { XBMC_NAVIGATION_ACTIONS["Down"],          XBMC_VIDEO_ACTIONS["Big Step Backward"],    XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['LEFT']        = { XBMC_NAVIGATION_ACTIONS["Left"],          XBMC_VIDEO_ACTIONS["Small Step Backward"],  XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['RIGHT']       = { XBMC_NAVIGATION_ACTIONS["Right"],         XBMC_VIDEO_ACTIONS["Small Step Forward"],   XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['ENTER']       = { XBMC_NAVIGATION_ACTIONS["Select"],        XBMC_VIDEO_ACTIONS["Show OSD"],             XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },

  ['INFO']        = { XBMC_NAVIGATION_ACTIONS["Info"],          XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS["Info"],           XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['MENU']        = { XBMC_NAVIGATION_ACTIONS["Context Menu"],  XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['CANCEL']      = { XBMC_NAVIGATION_ACTIONS["Back"],          XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },

  ['PLAY']        = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Play Pause"],           XBMC_MUSIC_ACTIONS["Play Pause"],     XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['PAUSE']       = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Play Pause"],           XBMC_MUSIC_ACTIONS["Play Pause"],     XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['SKIP_FWD']    = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Skip Next"],            XBMC_MUSIC_ACTIONS["Skip Next"],      XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['SKIP_REV']    = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Skip Previous"],        XBMC_MUSIC_ACTIONS["Skip Previous"],  XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['SCAN_FWD']    = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Fast Forward"],         XBMC_MUSIC_ACTIONS["Fast Forward"],   XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['SCAN_REV']    = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Rewind"],               XBMC_MUSIC_ACTIONS["Rewind"],         XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['STOP']        = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS["Stop"],                 XBMC_MUSIC_ACTIONS["Stop"],           XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  
  ['NUMBER_1']    = { XBMC_NAVIGATION_ACTIONS["1"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_2']    = { XBMC_NAVIGATION_ACTIONS["2"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_3']    = { XBMC_NAVIGATION_ACTIONS["3"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_4']    = { XBMC_NAVIGATION_ACTIONS["4"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_5']    = { XBMC_NAVIGATION_ACTIONS["5"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_6']    = { XBMC_NAVIGATION_ACTIONS["6"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_7']    = { XBMC_NAVIGATION_ACTIONS["7"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_8']    = { XBMC_NAVIGATION_ACTIONS["8"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_9']    = { XBMC_NAVIGATION_ACTIONS["9"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['STAR']        = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['NUMBER_0']    = { XBMC_NAVIGATION_ACTIONS["0"],             XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },
  ['POUND']       = { XBMC_NAVIGATION_ACTIONS[""],              XBMC_VIDEO_ACTIONS[""],                     XBMC_MUSIC_ACTIONS[""],               XBMC_PICTURE_ACTIONS[""],           XBMC_TV_ACTIONS[""]     },

  ['OPEN_CLOSE']  = { XBMC_NAVIGATION_ACTIONS["Eject Optical Drive"],
                      XBMC_VIDEO_ACTIONS["Eject Optical Drive"],
                      XBMC_MUSIC_ACTIONS["Eject Optical Drive"],
                      XBMC_PICTURE_ACTIONS["Eject Optical Drive"],
                      XBMC_TV_ACTIONS[""] }
}


function emit(t)
  t["jsonrpc"] = "2.0"
  command = JSON:encode(t)
  bUsePowerOnDelay = false
  dbg('Emit: ' .. command)

  table.insert(tEmitCommands, {command, bUsePowerOnDelay})

  if idEmitCommandsTimer == nil then
     idEmitCommandsTimer = C4:AddTimer(intraCommandDelayValue, 'MILLISECONDS', true)
  end
end


function OnTimerExpired(idTimer)
  dbg("On Timer Expired")
  
  if (idTimer == idEmitCommandsTimer) then
    if idBusyTimer ~= 0 then return end

    if tEmitCommands[1] ~= nil then
      dbg('SendToNetwork:' .. tEmitCommands[1][1])
      C4:SendToNetwork(6001, tonumber(jsonPort), tEmitCommands[1][1])
      
      if (tEmitCommands[1][2] == true) then
        idBusyTimer = C4:AddTimer(powerOnDelayValue, 'SECONDS', false)
      end
      
      table.remove(tEmitCommands, 1)

    elseif tEmitCommands[1] == nil then
      C4:KillTimer(idEmitCommandsTimer)
      idEmitCommandsTimer = nil
    end

    return
  end


  if (idTimer == idBusyTimer) then
    idBusyTimer = C4:KillTimer(idBusyTimer)
  end


  if (idTimer == gPollTimer) then

    dbg("XBMC: polltimer test") 
    -- Send a status query on the main port...
    -- If we haven't gotten a response, increment the 'not checked in'...
    -- if it hits 3, disconnect all ports...
    gLastCheckin = gLastCheckin or 0
    gLastCheckin = gLastCheckin + 1

    if (gLastCheckin > 2) then
      if (mNetConnected == true) then
        C4:NetDisconnect(6001, jsonPort)
        dbg("Failed to receive poll responses from XBMC... Disconnecting...")
      end
    end

    -- Send Poll Packet if we're ONLINE...
    if (mNetConnected == true) then
      emit(XBMC_NAVIGATION_ACTIONS['Get Active Players']())
    end

    return
  end


  if (idTimer == gReconnectTimer) then
    dbg("Attempting to reconnect to XBMC...")

    local bTrying = false
    gReconnectTimer = C4:KillTimer(gReconnectTimer)

    if (gNetworkStatus == "OFFLINE") then
      -- Try to reconnect to the XBMC Control port...
      C4:NetDisconnect(6001, jsonPort)
      C4:NetConnect(6001, jsonPort)
      bTrying = true
    end

    if (bTrying) then
      gReconnectTimer = C4:AddTimer(10, "SECONDS")
    end
  end

  if (idTimer == g_DebugTimer) then
    dbg('Turning Debug Mode back to Off [default] (timer expired)')
    C4:UpdateProperty('Debug Mode', 'Off')
    g_debugprint = false
    g_debuglog = false
    g_DebugTimer = C4:KillTimer(g_DebugTimer)
    return
  end
end


function ReceivedFromNetwork(idBinding, nPort, strData)
  dbg("Received From Network")
  dbg('XBMC: Received something from network on binding ' .. idBinding )
  dbg(strData)
  local t = JSON:decode(strData)    

  if (table.contains(t, "method")) then
    if (t.method == "AudioLibrary.OnRemove") then
      return

    elseif (t.method == "AudioLibrary.OnUpdate") then
      return

    elseif (t.method == "Player.OnPause") then
      return

    elseif (t.method == "Player.OnPlay") then
      CurrentPlayerID = t.params['data']['player']['playerid']
      local playerType = t.params['data']['item']['type']

      if (playerType == "movie") then 
        CurrentInputMode = "VIDEO_PLAYER"
      
      elseif (playerType == "episode") then 
        CurrentInputMode = "VIDEO_PLAYER"
      
      elseif (playerType == "musicvideo") then 
        CurrentInputMode = "VIDEO_PLAYER"
      
      elseif (playerType == "song") then 
        CurrentInputMode = "AUDIO_PLAYER"
      
      elseif (playerType == "picture") then 
        CurrentInputMode = "PICTURE_PLAYER"
      end

      dbg("XBMC: Player ID is now " .. CurrentPlayerID)
      dbg("Current Input Mode is now " .. CurrentInputMode)

    elseif (t.method == "Player.OnSeek") then
      return

    elseif (t.method == "Player.OnSpeedChanged") then
      return

    elseif (t.method == "Player.OnStop") then
      CurrentPlayerID = 0
      CurrentInputMode = "NAVIGATION"
      dbg("XBMC: Player ID is now " .. CurrentPlayerID)
      dbg("Current Input Mode is now NAVIGATION")
      return

    elseif (t.method == "System.OnLowBattery") then
      return

    elseif (t.method == "System.OnQuit") then
      return

    elseif (t.method == "System.OnRestart") then
      return

    elseif (t.method == "System.OnSleep") then
      return

    elseif (t.method == "System.OnWake") then
      return

    elseif (t.method == "VideoLibrary.OnRemove") then
      return

    elseif (t.method == "VideoLibrary.OnUpdate") then
      return
    end

    emit(XBMC_NAVIGATION_ACTIONS['Get Active Players']()) -- Just to be sure


  elseif (table.contains(t, "result")) then
  
  -- {"id":53,"jsonrpc":"2.0","result":"OK"}
  -- {"id":25,"jsonrpc":"2.0","result":{"speed":4}}
  -- {"id":26,"jsonrpc":"2.0","result":[{"playerid":1,"type":"video"}]}
  -- {"id":54,"jsonrpc":"2.0","result":[]}


    if (type(t.result) == "table") then
      if next (t.result) == nil then
        dbg("Resetting checkin counter")
        CurrentInputMode = "NAVIGATION"
        CurrentPlayerID = 0
        gLastCheckin = 0
        return

      elseif (t.result[1]['type'] == "video") then
        dbg("Resetting checkin counter")
        CurrentInputMode = "VIDEO_PLAYER"
        CurrentPlayerID = t.result[1]['playerid']
        gLastCheckin = 0
        return

      elseif (t.result[1]['type'] == "audio") then
        dbg("Resetting checkin counter")
        CurrentInputMode = "AUDIO_PLAYER"
        CurrentPlayerID = t.result[1]['playerid']
        gLastCheckin = 0
        return

      elseif (t.result[1]['type'] == "picture") then
        dbg("Resetting checkin counter")
        CurrentInputMode = "PICTURE_PLAYER"
        CurrentPlayerID = t.result[1]['playerid']
        gLastCheckin = 0
        return    

      elseif (t.result[1]['type'] == "player") then
        dbg("Resetting checkin counter")
        CurrentInputMode = "TV_PLAYER"
        CurrentPlayerID = t.result[1]['playerid']
        gLastCheckin = 0
        return  

      else  -- TODO: Need to clean this up a bit
        local playerType = t.result['item']['type']
        dbg("Item Player Type is " .. playerType)
      
        if (playerType == "channel") then
          CurrentInputMode = "TV_PLAYER"
        else --if (playerType == "video") -- if not in library Type is unknown
          CurrentInputMode = "VIDEO_PLAYER"
        end

        return
      end
    end

    dbg("Current Input Mode is " .. CurrentInputMode)
  end
end


function table.contains(table, element)
  for _, value in pairs(table) do
    if _ == element then
      return true
    end
  end
  return false
end


function OnConnectionStatusChanged(idBinding, nPort, strStatus)
  dbg("XBMC: OnConnectionStatusChanged[" .. idBinding .. " (" .. nPort .. ")]: " .. strStatus)

  if (idBinding == 6001) then
    gNetworkStatus=strStatus

    if (strStatus == "ONLINE") then
      mNetConnected = true
      gLastCheckin=0
      C4:UpdateProperty('Connected To Network','true')
      dbg("Connected to XBMC...")

      if (gPollTimer ~= 0) then C4:KillTimer(gPollTimer) end

      gPollTimer = C4:AddTimer(10, "SECONDS", true) -- 30 second repeating timer...
    
    else
      dbg("XBMC: not connected.")
      mNetConnected = false
      C4:UpdateProperty('Connected To Network','false')

      -- Try a re-connect of the device ...
      if (gReconnectTimer == nil) or (gReconnectTimer == 0) then
        gReconnectTimer = C4:AddTimer(10, "SECONDS")
        C4:NetDisconnect(6001, tonumber(jsonPort))
        C4:NetConnect(6001, tonumber(jsonPort))
      end
    end

  elseif (idBinding == 6003) then 
    if (strStatus == "ONLINE") then     
      -- wake on lan support comes from a WOL driver written by
      -- a guy named Will from homemation.
      dbg("Sending Wake on LAN magic packet")
      local MAC = Properties["XBMC MAC Address"]
      MAC = MAC:gsub(":", "") -- Remove any colons in the entered MAC addresses 
      MAC = tohex(MAC) -- Convert to HEX 
      packet = string.rep(string.char(255), 6) .. string.rep(MAC, 16) -- Build 'magic packet'. 
      hexdump (packet)
      C4:SendToNetwork (6003, 9, packet)
      C4:NetDisconnect(6003, 9)
    end
  end
end


function ReceivedFromProxy(idBinding, strCommand, tParams)
  dbg('XBMC: ReceivedFromProxy: ' .. strCommand)

  if (strCommand == "ON") then
    dbg('Got ON Command: ' .. "")

    if (Properties["Wake on LAN"] == "Enabled") then
      C4:NetConnect(6003, 9, "UDP")
    end
    -- TODO: Turn off screensaver
    -- TODO: Find current input mode
    -- TODO: Get current player ID
    
  elseif (strCommand == "OFF") then
    emit(XBMC_NAVIGATION_ACTIONS[Properties['Room Off Command']]())

  elseif (CurrentInputMode == "NAVIGATION") then
    emit(REMOTE_BUTTONS[strCommand][1]())
    
  elseif (CurrentInputMode == "VIDEO_PLAYER") then
    emit(REMOTE_BUTTONS[strCommand][2]())
  
  elseif (CurrentInputMode == "AUDIO_PLAYER") then
    emit(REMOTE_BUTTONS[strCommand][3]())

  elseif (CurrentInputMode == "PICTURE_PLAYER") then
    emit(REMOTE_BUTTONS[strCommand][4]())
  
  elseif (CurrentInputMode == "TV_PLAYER") then
    emit(REMOTE_BUTTONS[strCommand][5]())
  end
end


function ExecuteCommand(Command, Parameters)
  dbg('XBMC: ExecuteCommand: ' .. Command)
end


function OnDriverDestroyed()
  if (idEmitCommandsTimer) then
    idEmitCommandsTimer = C4:KillTimer(idEmitCommandsTimer)
    idEmitCommandsTimer = nil
  end

  if (g_DebugTimer) then g_DebugTimer = C4:KillTimer(g_DebugTimer) end
  if (gReconnectTimer ~= nil) then gReconnectTimer = C4:KillTimer(gReconnectTimer) end
  if (gPollTimer ~= nil) then gPollTimer = C4:KillTimer(gPollTimer) end
end
















function dbg(strDebugText)
  if (g_debugprint) then print(strDebugText) end
  if (g_debuglog) then C4:ErrorLog(strDebugText) end
end


function startDebugTimer()
  if (g_DebugTimer) then
    g_DebugTimer = C4:KillTimer(g_DebugTimer)
  end
  g_DebugTimer = C4:AddTimer(15, 'MINUTES')
end


function stopDebugTimer()
  g_DebugTimer = C4:KillTimer(g_DebugTimer)
  g_DebugTimer = 0
end


function OnPropertyChanged(strProperty)
  dbg("Property Changed")
  if (strProperty == 'Debug Mode') then
    if (Properties[strProperty] == 'Off') then
      dbg('XBMC: Turning off debug print')
      dbg('XBMC: Turning off debug log')
      g_debugprint = false
      g_debuglog = false
      stopDebugTimer()
    end

    if (Properties[strProperty] == 'Print') then
      dbg('XBMC: Turning on debug print')
      dbg('XBMC: Turning off debug log')
      g_debugprint = true
      g_debuglog = false
      startDebugTimer()
    end

    if (Properties[strProperty] == 'Log') then
      dbg('XBMC: Turning off debug print')
      dbg('XBMC: Turning on debug log')
      g_debugprint = false
      g_debuglog = true
      startDebugTimer()
    end

    if (Properties[strProperty] == 'Print and Log') then
      dbg('XBMC: Turning on debug print')
      dbg('XBMC: Turning on debug log')
      g_debugprint = true
      g_debuglog = true
      startDebugTimer()
    end
  end
end








C4:UpdateProperty("Version", version())

      ]]>
    </script>
  </config>
</devicedata>
